{"version":3,"sources":["components/ui/Notifications.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/Wallet.js","components/minter/Cover.js","utils/minter.js","components/minter/nfts/add.js","components/minter/nfts/card.js","components/ui/Loader.js","components/minter/nfts/index.js","hooks/useMinterContract.js","hooks/useContract.js","assets/img/cover.png","App.js","hooks/useBalance.js","reportWebVitals.js","index.js"],"names":["Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","className","NotificationError","DefaultProps","defaultProps","truncateAddress","address","slice","length","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","style","width","height","Wallet","amount","symbol","destroy","Dropdown","Toggle","variant","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","onClick","Cover","name","coverImg","connect","background","minHeight","maxWidth","src","alt","Button","catch","e","console","log","client","ipfsHttpClient","createNft","minterContract","performActions","a","description","ipfsImage","ipfsContent","ownerAddress","attributes","kit","defaultAccount","data","JSON","stringify","image","content","owner","add","added","url","path","methods","safeMint","send","from","transaction","uploadToIpfs","file","files","progress","prog","getNfts","nfts","totalSupply","call","nftsLength","i","nft","Promise","resolve","tokenURI","res","fetchNftMeta","meta","fetchNftOwner","index","push","Number","all","ipfsUrl","axios","get","ownerOf","fetchNftContractOwner","BACKGROUND","AddNfts","save","useState","setName","setIpfsImage","setIpfsContent","setDescription","setAttributes","show","setShow","handleClose","setAttributesFunc","trait_type","value","attributeObject","arr","findIndex","el","oldArray","Modal","onHide","centered","Header","closeButton","Title","Body","Form","FloatingLabel","controlId","label","Control","type","placeholder","onChange","imageUrl","alert","contentUrl","Label","hidden","map","color","toLowerCase","Footer","disabled","NftCard","Col","Card","Badge","bg","objectFit","Text","Row","attribute","key","Loader","role","NftList","useContractKit","setNfts","loading","setLoading","nftOwner","setNftOwner","getAssets","useCallback","allNfts","error","addNft","toast","fetchContractOwner","_address","xs","sm","lg","_nft","useMinterContract","abi","contractAddress","getConnectedKit","contract","setContract","getContract","web3","eth","Contract","useContract","BiblioNFTAbi","BiblioNFTContractAddress","BiblioNFT","App","balance","setBalance","getBalance","getTotalBalance","useBalance","Container","fluid","Nav","CELO","updateBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"kRAIMA,EAAe,kBACnB,cAAC,IAAD,CACEC,SAAS,gBACTC,UAAW,IACXC,iBAAe,EACfC,aAAW,EACXC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAW,EACXC,cAAY,KAIVC,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAC1B,gCACE,mBAAGC,UAAU,8CACb,sBAAMA,UAAU,sBAAhB,SAAuCD,QAIrCE,EAAoB,SAAC,GAAD,IAAGF,EAAH,EAAGA,KAAH,OACxB,gCACE,mBAAGC,UAAU,yCACb,sBAAMA,UAAU,sBAAhB,SAAuCD,QAQrCG,EAAe,CACnBH,KAAM,IAIRD,EAAoBK,aAAeD,EAGnCD,EAAkBE,aAAeD,E,kCCzCpBE,EAAkB,SAACC,GAC5B,GAAKA,EACL,OAAOA,EAAQC,MAAM,EAAG,GAAK,MAAQD,EAAQC,MAAMD,EAAQE,OAAS,EAAGF,EAAQE,SAItEC,EAAkB,SAACC,GAC5B,GAAKA,EACL,OAAOA,EAAIC,WCXQ,IDWmBC,QAAQ,I,sDERnC,SAASC,EAAT,GAAgD,IAA3BP,EAA0B,EAA1BA,QAASQ,EAAiB,EAAjBA,KAASC,EAAQ,iBACtDC,EAAMC,mBAWZ,OATAC,qBAAU,WACJZ,GAAWU,EAAIG,UACjBH,EAAIG,QAAQC,UAAY,GACxBJ,EAAIG,QAAQE,YACVC,IAASR,EAAMS,SAASjB,EAAQC,MAAM,EAAG,IAAK,SAGjD,CAACD,EAASQ,IAGX,+CAASC,GAAT,aACE,qBAAKC,IAAKA,EAAKQ,MAAO,CAAEC,MAAM,GAAD,OAAKX,EAAL,MAAeY,OAAO,GAAD,OAAKZ,EAAL,YCZxD,IAsDea,EAtDA,SAAC,GAA0C,IAAxCrB,EAAuC,EAAvCA,QAASsB,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzC,OAAIxB,EAEA,mCACE,eAACyB,EAAA,EAAD,WACE,eAACA,EAAA,EAASC,OAAV,CACEC,QAAQ,QACRC,MAAM,MACNC,GAAG,iBACHlC,UAAU,qDAJZ,UAMG2B,EACC,qCACGnB,EAAgBmB,GAAS,IAC1B,uBAAM3B,UAAU,OAAhB,cAAyB4B,QAG3B,cAACO,EAAA,EAAD,CAASC,UAAU,SAASvB,KAAK,KAAKb,UAAU,eAElD,cAACY,EAAD,CAAWP,QAASA,EAASQ,KAAM,GAAIb,UAAU,iBAGnD,eAAC8B,EAAA,EAASO,KAAV,CAAerC,UAAU,qBAAzB,UACE,cAAC8B,EAAA,EAASQ,KAAV,CACEC,KAAI,gEAA2DlC,EAA3D,iBACJmC,OAAO,SAFT,SAIE,eAACC,EAAA,EAAD,CAAOC,UAAU,aAAaC,IAAK,EAAnC,UACE,mBAAG3C,UAAU,6BACb,sBAAMA,UAAU,iBAAhB,SACGI,EAAgBC,UAIvB,cAACyB,EAAA,EAASc,QAAV,IACA,eAACd,EAAA,EAASQ,KAAV,CACEO,GAAG,SACH7C,UAAU,4BACV8C,QAAS,WACPjB,KAJJ,UAOE,mBAAG7B,UAAU,oCAPf,wBAgBH,M,SCpDH+C,EAAQ,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAC/B,OAAIF,EAEA,sBACEhD,UAAU,yDACVuB,MAAO,CAAE4B,WAAY,OAAQC,UAAW,SAF1C,UAIE,sBAAKpD,UAAU,0BAAf,UACE,qBACEA,UAAU,gCACVuB,MAAO,CAAE8B,SAAU,SAFrB,SAIE,qBAAKC,IAAKL,EAAUM,IAAI,OAE1B,6BAAKP,IACL,wEACA,cAACQ,EAAA,EAAD,CACEV,QAAS,kBAAMI,IAAUO,OAAM,SAACC,GAAD,OAAOC,QAAQC,IAAIF,OAClD1B,QAAQ,gBACRhC,UAAU,yBAHZ,+BASF,mBAAGA,UAAU,yBAAb,gCAKC,MAOT+C,EAAM5C,aAAe,CACnB6C,KAAM,IAGOD,Q,gGC1CTc,EAASC,iBAAe,sCAEjBC,EAAS,uCAAG,WACrBC,EACAC,EAFqB,4BAAAC,EAAA,6DAGnBlB,EAHmB,EAGnBA,KAAMmB,EAHa,EAGbA,YAAaC,EAHA,EAGAA,UAAWC,EAHX,EAGWA,YAAaC,EAHxB,EAGwBA,aAAcC,EAHtC,EAGsCA,WAHtC,SAKfN,EAAc,uCAAC,WAAOO,GAAP,uBAAAN,EAAA,yDACdlB,GAASmB,GAAgBC,GAAcC,EADzB,wDAEXI,EAAmBD,EAAnBC,eAGFC,EAAOC,KAAKC,UAAU,CAC1B5B,OACAmB,cACAU,MAAOT,EACPU,QAAST,EACTU,MAAON,EACPF,eAXiB,kBAgBGV,EAAOmB,IAAIN,GAhBd,cAgBXO,EAhBW,OAmBXC,EAnBW,+BAmBmBD,EAAME,MAnBzB,UAsBOnB,EAAeoB,QACpCC,SAASf,EAAcY,GACvBI,KAAK,CAAEC,KAAMd,IAxBC,eAsBbe,EAtBa,yBA0BVA,GA1BU,kCA4BjB7B,QAAQC,IAAI,yBAAZ,MA5BiB,0DAAD,uDALC,2CAAH,0DAsCP6B,EAAY,uCAAG,WAAO/B,GAAP,iBAAAQ,EAAA,yDACpBwB,EAAOhC,EAAElB,OAAOmD,MAAM,GADF,0EAIJ9B,EAAOmB,IAAIU,EAAM,CACnCE,SAAU,SAACC,GAAD,OAAUlC,QAAQC,IAAR,oBAAyBiC,OALvB,cAIlBZ,EAJkB,wDAOOA,EAAME,OAPb,kCASxBxB,QAAQC,IAAI,yBAAZ,MATwB,0DAAH,sDAaZkC,EAAO,uCAAG,WAAO9B,GAAP,qBAAAE,EAAA,sEAEb6B,EAAO,GAFM,SAGM/B,EAAeoB,QAAQY,cAAcC,OAH3C,OAInB,IADMC,EAHa,kBAIVC,GACP,IAAMC,EAAM,IAAIC,QAAJ,uCAAY,WAAOC,GAAP,mBAAApC,EAAA,sEACJF,EAAeoB,QAAQmB,SAASJ,GAAGF,OAD/B,cAChBO,EADgB,gBAEHC,EAAaD,GAFV,cAEhBE,EAFgB,gBAGFC,EAAc3C,EAAgBmC,GAH5B,OAGhBpB,EAHgB,OAItBuB,EAAQ,CACNM,MAAOT,EACPpB,QACA/B,KAAM0D,EAAKhC,KAAK1B,KAChB6B,MAAO6B,EAAKhC,KAAKG,MAEjBV,YAAauC,EAAKhC,KAAKP,YACvBI,WAAYmC,EAAKhC,KAAKH,aAXF,4CAAZ,uDAcZwB,EAAKc,KAAKT,IAfHD,EAAI,EAAGA,EAAIW,OAAOZ,GAAaC,IAAM,EAArCA,GAJU,yBAqBZE,QAAQU,IAAIhB,IArBA,kCAuBnBpC,QAAQC,IAAI,CAAEF,EAAC,OAvBI,0DAAH,sDA2BP+C,EAAY,uCAAG,WAAOO,GAAP,eAAA9C,EAAA,kEAEnB8C,EAFmB,yCAEH,MAFG,uBAGLC,IAAMC,IAAIF,GAHL,cAGlBN,EAHkB,yBAIjBA,GAJiB,gCAMxB/C,QAAQC,IAAI,CAAEF,EAAC,OANS,yDAAH,sDAUZiD,EAAa,uCAAG,WAAO3C,EAAgB4C,GAAvB,SAAA1C,EAAA,+EAEZF,EAAeoB,QAAQ+B,QAAQP,GAAOX,OAF1B,wEAIzBtC,QAAQC,IAAI,CAAEF,EAAC,OAJU,wDAAH,wDAQb0D,EAAqB,uCAAG,WAAOpD,GAAP,eAAAE,EAAA,+EAEfF,EAAeoB,QAAQL,QAAQkB,OAFhB,cAE7BlB,EAF6B,yBAG1BA,GAH0B,gCAKjCpB,QAAQC,IAAI,CAAEF,EAAC,OALkB,yDAAH,sDC9F9B2D,EAAa,CAAC,iBAAkB,cAAe,kBAAmB,mBAAoB,SAAU,oBA8OvFC,EA3OC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMlH,EAAc,EAAdA,QACvB,EAAwBmH,mBAAS,IAAjC,mBAAOxE,EAAP,KAAayE,EAAb,KACA,EAAkCD,mBAAS,IAA3C,mBAAOpD,EAAP,KAAkBsD,EAAlB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOnD,EAAP,KAAoBsD,EAApB,KACA,EAAsCH,mBAAS,IAA/C,mBAAOrD,EAAP,KAAoByD,EAApB,KAGA,EAAoCJ,mBAAS,IAA7C,mBAAOjD,EAAP,KAAmBsD,EAAnB,KACA,EAAwBL,oBAAS,GAAjC,mBAAOM,EAAP,KAAaC,EAAb,KAQMC,EAAc,WAClBD,GAAQ,GACRF,EAAc,KAOVI,EAAoB,SAACvE,EAAGwE,GAC5B,IAAOC,EAASzE,EAAElB,OAAX2F,MACDC,EAAkB,CACtBF,aACAC,SAEIE,EAAM9D,EAGNqC,EAAQyB,EAAIC,WAAU,SAACC,GAAD,OAAQA,EAAGL,aAAeA,KAEtD,GAAItB,GAAS,EAQX,OALAyB,EAAIzB,GAAS,CACXsB,aACAC,cAEFN,EAAcQ,GAKhBR,GAAc,SAACW,GAAD,4BAAkBA,GAAlB,CAA4BJ,QAG5C,OACE,qCACE,cAAC5E,EAAA,EAAD,CACEV,QAhCa,kBAAMiF,GAAQ,IAiC3B/F,QAAQ,OACRhC,UAAU,oBACVuB,MAAO,CAAEC,MAAO,QAJlB,SAME,mBAAGxB,UAAU,iBAIf,eAACyI,EAAA,EAAD,CAAOX,KAAMA,EAAMY,OAAQV,EAAaW,UAAQ,EAAhD,UACE,cAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACJ,EAAA,EAAMK,MAAP,2BAGF,cAACL,EAAA,EAAMM,KAAP,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,UAAU,gBACVC,MAAM,OACNnJ,UAAU,OAHZ,SAKE,cAACgJ,EAAA,EAAKI,QAAN,CACEC,KAAK,OACLC,YAAY,cACZC,SAAU,SAAC7F,GACT+D,EAAQ/D,EAAElB,OAAO2F,YAKvB,cAACc,EAAA,EAAD,CACEC,UAAU,mBACVC,MAAM,cACNnJ,UAAU,OAHZ,SAKE,cAACgJ,EAAA,EAAKI,QAAN,CACEvG,GAAG,WACHyG,YAAY,cACZ/H,MAAO,CAAEE,OAAQ,QACjB8H,SAAU,SAAC7F,GACTkE,EAAelE,EAAElB,OAAO2F,YAK9B,cAACc,EAAA,EAAD,CACEC,UAAU,aACVC,MAAM,QACNnJ,UAAU,OAHZ,SAKA,cAACgJ,EAAA,EAAKI,QAAN,CACEC,KAAK,OACLrJ,UAAW,OACXuJ,SAAQ,uCAAE,WAAO7F,GAAP,eAAAQ,EAAA,sEACeuB,EAAa/B,GAD5B,UACF8F,EADE,8BAGNC,MAAM,0BAHA,0BAMR/B,EAAa8B,GANL,2CAAF,sDAQRF,YAAY,mBAId,cAACL,EAAA,EAAD,CACEC,UAAU,eACVC,MAAM,UACNnJ,UAAU,OAHZ,SAKA,cAACgJ,EAAA,EAAKI,QAAN,CACEC,KAAK,OACLrJ,UAAW,OACXuJ,SAAQ,uCAAE,WAAO7F,GAAP,eAAAQ,EAAA,sEACiBuB,EAAa/B,GAD9B,UACFgG,EADE,8BAGND,MAAM,4BAHA,0BAMR9B,EAAe+B,GANP,2CAAF,sDAQRJ,YAAY,OAId,cAACN,EAAA,EAAKW,MAAN,UACE,8CAEF,eAACX,EAAA,EAAKI,QAAN,CACEvG,GAAG,SACH7C,UAAW,OACXuJ,SAAQ,uCAAE,WAAO7F,GAAP,SAAAQ,EAAA,sDACR+D,EAAkBvE,EAAG,cADb,2CAAF,sDAGR4F,YAAY,aANd,UAQE,wBAAQM,QAAM,EAAd,wBACCvC,EAAWwC,KAAI,SAACC,GAAD,OACd,wBAEE3B,MAAO2B,EAAMC,cAFf,SAIGD,GAJH,qBACqBA,EAAMC,2BAgDnC,eAACtB,EAAA,EAAMuB,OAAP,WACE,cAACxG,EAAA,EAAD,CAAQxB,QAAQ,oBAAoBc,QAASkF,EAA7C,mBAGA,cAACxE,EAAA,EAAD,CACExB,QAAQ,OACRiI,WAlMNjH,GAAQoB,GAAaC,GAAeF,GAAqC,IAAtBI,EAAWhE,QAmMxDuC,QAAS,WACPyE,EAAK,CACHvE,OACAoB,YACAC,cACAF,cACAG,aAAcjE,EACdkE,eAEFyD,KAZJ,kC,wCC7JKkC,GApDC,SAAC,GAAa,IAAX9D,EAAU,EAAVA,IACTvB,EAAuDuB,EAAvDvB,MAAOV,EAAgDiC,EAAhDjC,YAAaY,EAAmCqB,EAAnCrB,MAAO/B,EAA4BoD,EAA5BpD,KAAM4D,EAAsBR,EAAtBQ,MAAOrC,EAAe6B,EAAf7B,WAEhD,OACE,cAAC4F,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAMpK,UAAU,SAAhB,UACE,cAACoK,EAAA,EAAKxB,OAAN,UACE,eAACnG,EAAA,EAAD,CAAOC,UAAU,aAAaC,IAAK,EAAnC,UACE,cAAC/B,EAAD,CAAWP,QAAS0E,EAAOlE,KAAM,KACjC,sBAAMb,UAAU,gCAAhB,SACGI,EAAgB2E,KAEnB,eAACsF,EAAA,EAAD,CAAOC,GAAG,YAAYtK,UAAU,UAAhC,UACG4G,EADH,cAMJ,qBAAK5G,UAAU,mBAAf,SACE,qBAAKsD,IAAKuB,EAAOtB,IAAKY,EAAa5C,MAAO,CAAEgJ,UAAW,aAGzD,eAACH,EAAA,EAAKrB,KAAN,CAAW/I,UAAU,kCAArB,UACE,cAACoK,EAAA,EAAKtB,MAAN,UAAa9F,IACb,cAACoH,EAAA,EAAKI,KAAN,CAAWxK,UAAU,cAArB,SAAoCmE,IACpC,8BACE,cAACsG,GAAA,EAAD,CAAKzK,UAAU,OAAf,SACGuE,EAAWsF,KAAI,SAACa,EAAWC,GAAZ,OACd,cAACR,EAAA,EAAD,UACE,sBAAKnK,UAAU,0BAAf,UACE,qBAAKA,UAAU,kDAAf,SACG0K,EAAUxC,aAEb,qBAAKlI,UAAU,gDAAf,SACG0K,EAAUvC,YANPwC,iBAxBZ/D,ICACgE,GAPA,kBACb,qBAAK5K,UAAU,gCAAf,SACE,cAACmC,EAAA,EAAD,CAASC,UAAU,SAASyI,KAAK,SAAS7K,UAAU,aAApD,SACE,sBAAMA,UAAU,kBAAhB,6BCSA8K,GAAU,SAAC,GAA4B,IAA3B9G,EAA0B,EAA1BA,eAAgBhB,EAAU,EAAVA,KAKhC,EAAkC+H,2BAA3B9G,EAAP,EAAOA,eAAgB5D,EAAvB,EAAuBA,QACvB,EAAwBmH,mBAAS,IAAjC,mBAAOzB,EAAP,KAAaiF,EAAb,KACA,EAA8BxD,oBAAS,GAAvC,mBAAOyD,EAAP,KAAgBC,EAAhB,KACA,EAAgC1D,mBAAS,MAAzC,mBAAO2D,EAAP,KAAiBC,EAAjB,KAEMC,EAAYC,sBAAW,sBAAC,4BAAApH,EAAA,sEAE1BgH,GAAW,GAFe,SAKJpF,EAAQ9B,GALJ,UAKpBuH,EALoB,wDAO1BP,EAAQO,GAPkB,kDAS1B5H,QAAQC,IAAI,CAAE4H,MAAK,OATO,yBAW1BN,GAAW,GAXe,6EAa3B,CAAClH,IAEEyH,EAAM,uCAAG,WAAO/G,GAAP,SAAAR,EAAA,sEAEXgH,GAAW,GAFA,SAILnH,EAAUC,EAAgBC,EAAgBS,GAJrC,OAKXgH,YAAM,cAAC,EAAD,CAAqB3L,KAAK,2BAChCsL,IANW,gDAQX1H,QAAQC,IAAI,CAAE4H,MAAK,OACnBE,YAAM,cAAC,EAAD,CAAmB3L,KAAK,8BATnB,yBAWXmL,GAAW,GAXA,4EAAH,sDAeNS,EAAqBL,sBAAW,uCAAC,WAAOtH,GAAP,eAAAE,EAAA,sEAGdkD,EAAsBpD,GAHR,OAG/B4H,EAH+B,OAIrCR,EAAYQ,GAJyB,2CAAD,sDAKnC,IAYH,OAVA3K,qBAAU,WACR,IACMZ,GAAW2D,IACbqH,IACAM,EAAmB3H,IAErB,MAAOwH,GACP7H,QAAQC,IAAI,CAAE4H,aAEf,CAACxH,EAAgB3D,EAASgL,EAAWM,IACpCtL,EAEA,mCACI4K,EAyBA,cAAC,GAAD,IAxBA,qCACE,sBAAKjL,UAAU,yDAAf,UACE,oBAAIA,UAAU,oBAAd,SAAmCgD,IAGlCmI,IAAa9K,EACV,cAAC,EAAD,CAASkH,KAAMkE,EAAQpL,QAASA,IAChC,QAGN,cAACoK,GAAA,EAAD,CAAKoB,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAG/L,UAAU,2BAApC,SAGG+F,EAAK8D,KAAI,SAACmC,GAAD,OACN,cAAC,GAAD,CAEI5F,IAAG,eACE4F,IAFAA,EAAKpF,iBAcvB,MAUTkE,GAAQ3K,aAAe,CACrB6D,eAAgB,MAGH8G,U,oBCnHFmB,GAAoB,kBCDN,SAACC,EAAKC,GAC/B,MAAqCpB,2BAA7BqB,EAAR,EAAQA,gBAAiB/L,EAAzB,EAAyBA,QACzB,EAAgCmH,mBAAS,MAAzC,mBAAO6E,EAAP,KAAiBC,EAAjB,KAEMC,EAAcjB,sBAAW,sBAAC,4BAAApH,EAAA,sEACZkI,IADY,OACxB5H,EADwB,OAE9B8H,EAAY,IAAI9H,EAAIgI,KAAKC,IAAIC,SAASR,EAAKC,IAFb,2CAG7B,CAACC,EAAiBF,EAAKC,IAM1B,OAJAlL,qBAAU,WACJZ,GAASkM,MACZ,CAAClM,EAASkM,IAENF,EDXPM,CAAYC,GAAaV,IAAKW,GAAyBC,YEL1C,OAA0B,kCC8C1BC,I,QAnCH,WACV,MAAsChC,2BAA9B1K,EAAR,EAAQA,QAASwB,EAAjB,EAAiBA,QAASqB,EAA1B,EAA0BA,QAC1B,ECVwB,WACxB,MAAyB6H,2BAAjB1K,EAAR,EAAQA,QAASmE,EAAjB,EAAiBA,IACjB,EAA8BgD,mBAAS,GAAvC,mBAAOwF,EAAP,KAAgBC,EAAhB,KAEMC,EAAa5B,sBAAW,sBAAC,4BAAApH,EAAA,sEAETM,EAAI2I,gBAAgB9M,GAFX,OAEvB8H,EAFuB,OAG7B8E,EAAW9E,GAHkB,2CAI5B,CAAC9H,EAASmE,IAMb,OAJAvD,qBAAU,WACJZ,GAAS6M,MACZ,CAAC7M,EAAS6M,IAEN,CACLF,UACAE,cDN8BE,GAAxBJ,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,WACXlJ,EAAiBiI,KAEvB,OACE,qCACE,cAAC,EAAD,IACC5L,EACC,eAACgN,EAAA,EAAD,CAAWC,MAAM,KAAjB,UACE,cAACC,EAAA,EAAD,CAAKvN,UAAU,gCAAf,SACE,cAACuN,EAAA,EAAIjL,KAAL,UACE,cAAC,EAAD,CACEjC,QAASA,EACTsB,OAAQqL,EAAQQ,KAChB5L,OAAO,OACPC,QAASA,QAIf,+BACE,cAAC,GAAD,CACEmB,KAAK,oBACLyK,cAAeP,EACflJ,eAAgBA,SAKtB,cAAC,EAAD,CAAOhB,KAAK,oBAAoBC,SAAUA,GAAUC,QAASA,SE1BtDwK,GAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAEnB,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gCCKdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,sBAAD,CACEC,SAAU,CAACC,aACXC,QAAS,CACPxL,KAAMyL,eAAaF,UACnBG,OAAQ,2CACRC,QAAS,yDACTC,SAAU,gDACVC,QAAS,OAEXC,KAAM,CACJ9L,KAAM,wBACNmB,YAAa,qCAXjB,SAcE,cAAC,GAAD,QAGJ4K,SAASC,eAAe,SAM1BtB,M","file":"static/js/main.a0b1acf4.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ToastContainer } from \"react-toastify\";\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport { Notification, NotificationSuccess, NotificationError };\n","import {ERC20_DECIMALS} from \"./constants\";\n\n// format a wallet address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\n}\n\n// convert from big number\nexport const formatBigNumber = (num) => {\n    if (!num) return\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n}","const ERC20_DECIMALS = 18;\nexport { ERC20_DECIMALS };\n","import { useEffect, useRef } from \"react\";\nimport Jazzicon from \"@metamask/jazzicon\";\n\nexport default function Identicon({ address, size, ...rest }) {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(\n        Jazzicon(size, parseInt(address.slice(2, 10), 16))\n      );\n    }\n  }, [address, size]);\n\n  return (\n    <div {...rest}>\n      <div ref={ref} style={{ width: `${size}px`, height: `${size}px` }} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\nimport { formatBigNumber, truncateAddress } from \"./../utils\";\nimport Identicon from \"./ui/Identicon\";\n\nconst Wallet = ({ address, amount, symbol, destroy }) => {\n  if (address) {\n    return (\n      <>\n        <Dropdown>\n          <Dropdown.Toggle\n            variant=\"light\"\n            align=\"end\"\n            id=\"dropdown-basic\"\n            className=\"d-flex align-items-center border rounded-pill py-1\"\n          >\n            {amount ? (\n              <>\n                {formatBigNumber(amount)}{\" \"}\n                <span className=\"ms-1\"> {symbol}</span>\n              </>\n            ) : (\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\n            )}\n            <Identicon address={address} size={28} className=\"ms-2 me-1\" />\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu className=\"shadow-lg border-0\">\n            <Dropdown.Item\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\n              target=\"_blank\"\n            >\n              <Stack direction=\"horizontal\" gap={2}>\n                <i className=\"bi bi-person-circle fs-4\" />\n                <span className=\"font-monospace\">\n                  {truncateAddress(address)}\n                </span>\n              </Stack>\n            </Dropdown.Item>\n            <Dropdown.Divider />\n            <Dropdown.Item\n              as=\"button\"\n              className=\"d-flex align-items-center\"\n              onClick={() => {\n                destroy();\n              }}\n            >\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\n              Disconnect\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </>\n    );\n  }\n\n  return null;\n};\n\nexport default Wallet;\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\n\nconst Cover = ({ name, coverImg, connect }) => {\n  if (name) {\n    return (\n      <div\n        className=\"d-flex justify-content-center flex-column text-center \"\n        style={{ background: \"#000\", minHeight: \"100vh\" }}\n      >\n        <div className=\"mt-auto text-light mb-5\">\n          <div\n            className=\" ratio ratio-1x1 mx-auto mb-2\"\n            style={{ maxWidth: \"320px\" }}\n          >\n            <img src={coverImg} alt=\"\" />\n          </div>\n          <h1>{name}</h1>\n          <p>Please connect your wallet to continue.</p>\n          <Button\n            onClick={() => connect().catch((e) => console.log(e))}\n            variant=\"outline-light\"\n            className=\"rounded-pill px-3 mt-3\"\n          >\n            Connect Wallet\n          </Button>\n        </div>\n\n        <p className=\"mt-auto text-secondary\">Powered by Celo</p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nCover.propTypes = {\n  name: PropTypes.string,\n};\n\nCover.defaultProps = {\n  name: \"\",\n};\n\nexport default Cover;","import { create as ipfsHttpClient } from \"ipfs-http-client\";\nimport axios from \"axios\";\n\nconst client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\n\nexport const createNft = async (\n    minterContract,\n    performActions,\n    { name, description, ipfsImage, ipfsContent, ownerAddress, attributes }\n  ) => {\n    await performActions(async (kit) => {\n      if (!name || !description || !ipfsImage || !ipfsContent) return;\n      const { defaultAccount } = kit;\n  \n      // convert NFT metadata to JSON format\n      const data = JSON.stringify({\n        name,\n        description,\n        image: ipfsImage,\n        content: ipfsContent,\n        owner: defaultAccount,\n        attributes,\n      });\n  \n      try {\n        // save NFT metadata to IPFS\n        const added = await client.add(data);\n  \n        // IPFS url for uploaded metadata\n        const url = `https://ipfs.io/ipfs/${added.path}`;\n  \n        // mint the NFT and save the IPFS url to the blockchain\n        let transaction = await minterContract.methods\n          .safeMint(ownerAddress, url)\n          .send({ from: defaultAccount });\n  \n        return transaction;\n      } catch (error) {\n        console.log(\"Error uploading file: \", error);\n      }\n    });\n  };\n\n  export const uploadToIpfs = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    try {\n      const added = await client.add(file, {\n        progress: (prog) => console.log(`received: ${prog}`),\n      });\n      return `https://ipfs.io/ipfs/${added.path}`;\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  };\n\n  export const getNfts = async (minterContract) => {\n    try {\n      const nfts = [];\n      const nftsLength = await minterContract.methods.totalSupply().call();\n      for (let i = 0; i < Number(nftsLength); i++) {\n        const nft = new Promise(async (resolve) => {\n          const res = await minterContract.methods.tokenURI(i).call();\n          const meta = await fetchNftMeta(res);\n          const owner = await fetchNftOwner(minterContract, i);\n          resolve({\n            index: i,\n            owner,\n            name: meta.data.name,\n            image: meta.data.image,\n            // content: meta.data.content,\n            description: meta.data.description,\n            attributes: meta.data.attributes,\n          });\n        });\n        nfts.push(nft);\n      }\n      return Promise.all(nfts);\n    } catch (e) {\n      console.log({ e });\n    }\n  };\n\n  export const fetchNftMeta = async (ipfsUrl) => {\n    try {\n      if (!ipfsUrl) return null;\n      const meta = await axios.get(ipfsUrl);\n      return meta;\n    } catch (e) {\n      console.log({ e });\n    }\n  };\n\n  export const fetchNftOwner = async (minterContract, index) => {\n    try {\n      return await minterContract.methods.ownerOf(index).call();\n    } catch (e) {\n      console.log({ e });\n    }\n  };\n  \n  export const fetchNftContractOwner = async (minterContract) => {\n    try {\n      let owner = await minterContract.methods.owner().call();\n      return owner;\n    } catch (e) {\n      console.log({ e });\n    }\n  };\n\n","/* eslint-disable react/jsx-filename-extension */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\nimport { uploadToIpfs } from \"../../../utils/minter\";\n\n// basic attributes that can be added to NFT\nconst BACKGROUND = [\"pastel-rainbow\", \"purple-teal\", \"pink-watercolor\", \"pastel-blue-pink\", \"galaxy\", \"pile-of-glitters\"];\n\n\nconst AddNfts = ({ save, address }) => {\n  const [name, setName] = useState(\"\");\n  const [ipfsImage, setIpfsImage] = useState(\"\");\n  const [ipfsContent, setIpfsContent] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  //store attributes of an NFT\n  const [attributes, setAttributes] = useState([]);\n  const [show, setShow] = useState(false);\n\n\n  // check if all form data has been filled\n  const isFormFilled = () =>\n      name && ipfsImage && ipfsContent && description && attributes.length === 1;\n\n  // close the popup modal\n  const handleClose = () => {\n    setShow(false);\n    setAttributes([]);\n  };\n\n  // display the popup modal\n  const handleShow = () => setShow(true);\n\n  // add an attribute to an NFT\n  const setAttributesFunc = (e, trait_type) => {\n    const {value} = e.target;\n    const attributeObject = {\n      trait_type,\n      value,\n    };\n    const arr = attributes;\n\n    // check if attribute already exists\n    const index = arr.findIndex((el) => el.trait_type === trait_type);\n\n    if (index >= 0) {\n\n      // update the existing attribute\n      arr[index] = {\n        trait_type,\n        value,\n      };\n      setAttributes(arr);\n      return;\n    }\n\n    // add a new attribute\n    setAttributes((oldArray) => [...oldArray, attributeObject]);\n  };\n\n  return (\n    <>\n      <Button\n        onClick={handleShow}\n        variant=\"dark\"\n        className=\"rounded-pill px-0\"\n        style={{ width: \"38px\" }}\n      >\n        <i className=\"bi bi-plus\"></i>\n      </Button>\n\n      {/* Modal */}\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Create NFT</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Form>\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Name\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Name of NFT\"\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <FloatingLabel\n              controlId=\"inputDescription\"\n              label=\"Description\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                as=\"textarea\"\n                placeholder=\"description\"\n                style={{ height: \"80px\" }}\n                onChange={(e) => {\n                  setDescription(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <FloatingLabel\n              controlId=\"inputImage\"\n              label=\"Image\"\n              className=\"mb-3\"\n            >\n            <Form.Control\n              type=\"file\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                const imageUrl = await uploadToIpfs(e);\n                if (!imageUrl) {\n                  alert(\"failed to upload image\");\n                  return;\n                }\n                setIpfsImage(imageUrl);\n              }}\n              placeholder=\"Product name\"\n            ></Form.Control>\n            </FloatingLabel>\n\n            <FloatingLabel\n              controlId=\"inputContent\"\n              label=\"Content\"\n              className=\"mb-3\"\n            >  \n            <Form.Control\n              type=\"file\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                const contentUrl = await uploadToIpfs(e);\n                if (!contentUrl) {\n                  alert(\"failed to upload content\");\n                  return;\n                }\n                setIpfsContent(contentUrl);\n              }}\n              placeholder=\"\"\n            ></Form.Control>\n            </FloatingLabel>\n\n            <Form.Label>\n              <h5>Properties</h5>\n            </Form.Label>\n            <Form.Control\n              as=\"select\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                setAttributesFunc(e, \"background\");\n              }}\n              placeholder=\"Background\"\n            >\n              <option hidden>Background</option>\n              {BACKGROUND.map((color) => (\n                <option\n                  key={`background-${color.toLowerCase()}`}\n                  value={color.toLowerCase()}\n                >\n                  {color}\n                </option>\n              ))}\n            </Form.Control>\n\n            {/* <Form.Control\n              as=\"select\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                setAttributesFunc(e, \"color\");\n              }}\n              placeholder=\"NFT Color\"\n            >\n              <option hidden>Color</option>\n              {COLORS.map((color) => (\n                <option\n                  key={`color-${color.toLowerCase()}`}\n                  value={color.toLowerCase()}\n                >\n                  {color}\n                </option>\n              ))}\n            </Form.Control> */}\n\n            {/* <Form.Control\n              as=\"select\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                setAttributesFunc(e, \"shape\");\n              }}\n              placeholder=\"NFT Shape\"\n            >\n              <option hidden>Shape</option>\n              {SHAPES.map((shape) => (\n                <option\n                  key={`shape-${shape.toLowerCase()}`}\n                  value={shape.toLowerCase()}\n                >\n                  {shape}\n                </option>\n              ))}\n            </Form.Control> */}\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button\n            variant=\"dark\"\n            disabled={!isFormFilled()}\n            onClick={() => {\n              save({\n                name,\n                ipfsImage,\n                ipfsContent,\n                description,\n                ownerAddress: address,\n                attributes,\n              });\n              handleClose();\n            }}\n          >\n            Create NFT\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nAddNfts.propTypes = {\n\n  // props passed into this component\n  save: PropTypes.func.isRequired,\n  address: PropTypes.string.isRequired,\n};\n\nexport default AddNfts;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, Col, Badge, Stack, Row } from \"react-bootstrap\";\nimport { truncateAddress } from \"../../../utils\";\nimport Identicon from \"../../ui/Identicon\";\n\nconst NftCard = ({ nft }) => {\n  const { image, description, owner, name, index, attributes } = nft;\n\n  return (\n    <Col key={index}>\n      <Card className=\" h-100\">\n        <Card.Header>\n          <Stack direction=\"horizontal\" gap={2}>\n            <Identicon address={owner} size={28} />\n            <span className=\"font-monospace text-secondary\">\n              {truncateAddress(owner)}\n            </span>\n            <Badge bg=\"secondary\" className=\"ms-auto\">\n              {index} ID\n            </Badge>\n          </Stack>\n        </Card.Header>\n\n        <div className=\" ratio ratio-4x3\">\n          <img src={image} alt={description} style={{ objectFit: \"cover\" }} />\n        </div>\n\n        <Card.Body className=\"d-flex  flex-column text-center\">\n          <Card.Title>{name}</Card.Title>\n          <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\n          <div>\n            <Row className=\"mt-2\">\n              {attributes.map((attribute, key) => (\n                <Col key={key}>\n                  <div className=\"border rounded bg-light\">\n                    <div className=\"text-secondary fw-lighter small text-capitalize\">\n                      {attribute.trait_type}\n                    </div>\n                    <div className=\"text-secondary text-capitalize font-monospace\">\n                      {attribute.value}\n                    </div>\n                  </div>\n                </Col>\n              ))}\n            </Row>\n          </div>\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nNftCard.propTypes = {\n  // props passed into this component\n  nft: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default NftCard;","import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nconst Loader = () => (\n  <div className=\"d-flex justify-content-center\">\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>\n);\nexport default Loader;\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport AddNfts from \"./add\"\nimport Nft from \"./card\";\nimport Loader from \"../../ui/Loader\";\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\nimport {\n  getNfts,\n  createNft,\n  fetchNftContractOwner,\n} from \"../../../utils/minter\";\nimport { Row } from \"react-bootstrap\";\n\nconst NftList = ({minterContract, name}) => {\n\n  /* performActions : used to run smart contract interactions in order\n  *  address : fetch the address of the connected wallet\n  */\n  const {performActions, address} = useContractKit();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [nftOwner, setNftOwner] = useState(null);\n\n  const getAssets = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      // fetch all nfts from the smart contract\n      const allNfts = await getNfts(minterContract);\n      if (!allNfts) return\n      setNfts(allNfts);\n    } catch (error) {\n      console.log({ error });\n    } finally {\n      setLoading(false);\n    }\n  }, [minterContract]);\n\n  const addNft = async (data) => {\n    try {\n      setLoading(true);\n      // create an nft functionality\n      await createNft(minterContract, performActions, data);\n      toast(<NotificationSuccess text=\"Updating NFT list....\"/>);\n      getAssets();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchContractOwner = useCallback(async (minterContract) => {\n\n    // get the address that deployed the NFT contract\n    const _address = await fetchNftContractOwner(minterContract);\n    setNftOwner(_address);\n  }, []);\n\n  useEffect(() => {\n    try {\n      if (address && minterContract) {\n        getAssets();\n        fetchContractOwner(minterContract);\n      }\n    } catch (error) {\n      console.log({ error });\n    }\n  }, [minterContract, address, getAssets, fetchContractOwner]);\n  if (address) {\n    return (\n      <>\n        {!loading ? (\n          <>\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\n              <h1 className=\"fs-4 fw-bold mb-0\">{name}</h1>\n\n              {/* give the add NFT permission to user who deployed the NFT smart contract */}\n              {nftOwner === address ? (\n                  <AddNfts save={addNft} address={address}/>\n              ) : null}\n\n            </div>\n            <Row xs={1} sm={2} lg={3} className=\"g-3  mb-5 g-xl-4 g-xxl-5\">\n\n              {/* display all NFTs */}\n              {nfts.map((_nft) => (\n                  <Nft\n                      key={_nft.index}\n                      nft={{\n                        ..._nft,\n                      }}\n                  />\n              ))}\n            </Row>\n          </>\n        ) : (\n          <Loader />\n        )}\n      </>\n    );\n  }\n  return null;\n};\n\nNftList.propTypes = {\n\n  // props passed into this component\n  minterContract: PropTypes.instanceOf(Object),\n  updateBalance: PropTypes.func.isRequired,\n};\n\nNftList.defaultProps = {\n  minterContract: null,\n};\n\nexport default NftList;","import { useContract } from \"./useContract\";\nimport BiblioNFTAbi from \"../contracts/BiblioNFT.json\";\nimport BiblioNFTContractAddress from \"../contracts/BiblioNFT-address.json\";\n\nexport const useMinterContract = () =>\n  useContract(BiblioNFTAbi.abi, BiblioNFTContractAddress.BiblioNFT);","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);\n\n  return contract;\n};\n","export default __webpack_public_path__ + \"static/media/cover.0f3d0b5a.png\";","import React from \"react\";\nimport { Container, Nav } from \"react-bootstrap\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { Notification } from \"./components/ui/Notifications\";\nimport Wallet from \"./components/Wallet\";\nimport Cover from \"./components/minter/Cover\";\nimport Nfts from \"./components/minter/nfts\";\nimport { useBalance, useMinterContract } from \"./hooks\";\nimport coverImg from \"./assets/img/cover.png\";\nimport \"./App.css\";\n\nconst App = function AppWrapper() {\n  const { address, destroy, connect } = useContractKit();\n  const { balance, getBalance } = useBalance();\n  const minterContract = useMinterContract();\n\n  return (\n    <>\n      <Notification />\n      {address ? (\n        <Container fluid=\"md\">\n          <Nav className=\"justify-content-end pt-3 pb-5\">\n            <Nav.Item>\n              <Wallet\n                address={address}\n                amount={balance.CELO}\n                symbol=\"CELO\"\n                destroy={destroy}\n              />\n            </Nav.Item>\n          </Nav>\n          <main>\n            <Nfts\n              name=\"Biblio Collection\"\n              updateBalance={getBalance}\n              minterContract={minterContract}\n            />\n          </main>\n        </Container>\n      ) : (\n        <Cover name=\"Biblio Collection\" coverImg={coverImg} connect={connect} />\n      )}\n    </>\n  );\n};\n\nexport default App;","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useBalance = () => {\n  const { address, kit } = useContractKit();\n  const [balance, setBalance] = useState(0);\n\n  const getBalance = useCallback(async () => {\n    // fetch a connected wallet token balance\n    const value = await kit.getTotalBalance(address);\n    setBalance(value);\n  }, [address, kit]);\n\n  useEffect(() => {\n    if (address) getBalance();\n  }, [address, getBalance]);\n\n  return {\n    balance,\n    getBalance,\n  };\n};\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ContractKitProvider,\n  Alfajores,\n  NetworkNames,\n} from \"@celo-tools/use-contractkit\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContractKitProvider\n      networks={[Alfajores]}\n      network={{\n        name: NetworkNames.Alfajores,\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\n        chainId: 44787,\n      }}\n      dapp={{\n        name: \"BiblioNFT Minter Dapp\",\n        description: \"NFT for Booklovers and supporters\",\n      }}\n    >\n      <App />\n    </ContractKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}